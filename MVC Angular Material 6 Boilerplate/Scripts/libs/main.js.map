{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/material.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,yCAAyC,wBAAwB,KAAK,yBAAyB,uBAAuB,KAAK,C;;;;;;;;;;;ACA3H,wvBAAwvB,iBAAiB,sB;;;;;;;;;;;;;;;;;;;;;ACA/tB;AAO1C;IALA;QAOI,WAAM,GAAW,EAAE,CAAC;QACpB,kBAAa,GAAW,EAAE,CAAC;QAC3B,gBAAW,GAAY,KAAK,CAAC;IAWjC,CAAC;IATG,iCAAU,GAAV;QAAA,iBAOC;QANG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,UAAU,CAAC;YACP,KAAI,CAAC,aAAa,GAAG,KAAI,CAAC,MAAM,CAAC;YACjC,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC,EAAE,IAAI,CAAC,CAAC;IACb,CAAC;IAbQ,YAAY;QALxB,+DAAS,CAAC;YACP,QAAQ,EAAE,UAAU;;;SAGvB,CAAC;OACW,YAAY,CAexB;IAAD,mBAAC;CAAA;AAfwB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPzB,0CAA0C;AACgB;AACjB;AACsC;AAClC;AAEE;AAE/C,UAAU;AACyC;AAenD;IAAA;IAAyB,CAAC;IAAb,SAAS;QAbrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACL,uEAAa;gBACb,4FAAuB;gBACvB,+DAAc;gBACd,0DAAW;aACd;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;ACxBoB;AAEqF;AAM/H;IAAA;IAA8B,CAAC;IAAlB,cAAc;QAJ1B,8DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,iEAAe,EAAE,kEAAgB,EAAE,gEAAc,EAAE,0EAAwB,EAAE,+DAAa,CAAC;YACrG,OAAO,EAAE,CAAC,iEAAe,EAAE,kEAAgB,EAAE,gEAAc,EAAE,0EAAwB,EAAE,+DAAa,CAAC;SACxG,CAAC;OACW,cAAc,CAAI;IAAD,qBAAC;CAAA;AAAJ;;;;;;;;;;;;;;ACR3B;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;ACdpB;AAC4B;AAE9B;AACY;AAExC;AAEjB,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\n\\r\\n.example-icon {\\r\\n    padding: 0 14px;\\r\\n}\\r\\n\\r\\n.example-spacer {\\r\\n    flex: 1 1 auto;\\r\\n}\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\r\\n    <mat-toolbar-row>\\r\\n        <span>My Material</span>\\r\\n\\r\\n        <span class=\\\"example-spacer\\\"></span>\\r\\n\\r\\n        <button mat-button>About</button>\\r\\n        <button mat-button>Services</button>\\r\\n        <button mat-button>Contact</button>\\r\\n    </mat-toolbar-row>\\r\\n</mat-toolbar>\\r\\n\\r\\n<mat-card>\\r\\n    <mat-form-field>\\r\\n        <input matInput [(ngModel)]=\\\"answer\\\" placeholder=\\\"Who are you?\\\">\\r\\n    </mat-form-field>\\r\\n\\r\\n    <br>\\r\\n\\r\\n    <button mat-raised-button (click)=\\\"showAnswer()\\\">Answer me</button>\\r\\n    <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\r\\n</mat-card>\\r\\n\\r\\n\\r\\n<mat-card *ngIf=\\\"answerDisplay\\\">\\r\\n    <h1>Hi {{ answerDisplay }}!</h1>\\r\\n</mat-card>\"","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\r\n\r\n    answer: string = '';\r\n    answerDisplay: string = '';\r\n    showSpinner: boolean = false;\r\n\r\n    showAnswer() {\r\n        this.showSpinner = true;\r\n\r\n        setTimeout(() => {\r\n            this.answerDisplay = this.answer;\r\n            this.showSpinner = false;\r\n        }, 2000);\r\n    }\r\n\r\n}","// Angular Core + Angular Material Modules\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n// Modules\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n      BrowserModule,\n      BrowserAnimationsModule,\n      MaterialModule,\n      FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","ï»¿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule, MatToolbarModule, MatInputModule, MatProgressSpinnerModule, MatCardModule } from '@angular/material';\r\n\r\n@NgModule({\r\n    imports: [MatButtonModule, MatToolbarModule, MatInputModule, MatProgressSpinnerModule, MatCardModule],\r\n    exports: [MatButtonModule, MatToolbarModule, MatInputModule, MatProgressSpinnerModule, MatCardModule],\r\n})\r\nexport class MaterialModule { }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs'\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}